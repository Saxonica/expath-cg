<test-set xmlns="http://www.w3.org/2010/09/qt-fots-catalog" name="expath-binary">
  <description> Tests for the extension functions in the EXPath "binary" package. Takem from the
    internal BaseX test cases.</description>
  <link type="spec" document="http://expath.org/spec/binary"/>
  <environment name="binary">
    <namespace prefix="bin" uri="http://expath.org/ns/binary"/>
  </environment>
  <test-case name="bin-hex1">
    <description>Test for the hex function.</description>
    <created by="Christian Grün" on="2013-11-19+01:00"/>
    <environment ref="binary"/>
    <test>xs:hexBinary(bin:hex(()))</test>
    <result>
      <assert-empty/>
    </result>
  </test-case>
  <test-case name="bin-hex2">
    <description>Test for the hex function.</description>
    <created by="Christian Grün" on="2013-11-19+01:00"/>
    <environment ref="binary"/>
    <test>xs:hexBinary(bin:hex(""))</test>
    <result>
      <assert-eq>xs:hexBinary("")</assert-eq>
    </result>
  </test-case>
  <test-case name="bin-hex3">
    <description>Test for the hex function.</description>
    <created by="Christian Grün" on="2013-11-19+01:00"/>
    <environment ref="binary"/>
    <test>xs:hexBinary(bin:hex("1"))</test>
    <result>
      <assert-eq>xs:hexBinary("01")</assert-eq>
    </result>
  </test-case>
  <test-case name="bin-hex4">
    <description>Test for the hex function.</description>
    <created by="Christian Grün" on="2013-11-19+01:00"/>
    <environment ref="binary"/>
    <test>xs:hexBinary(bin:hex("FF"))</test>
    <result>
      <assert-eq>xs:hexBinary("FF")</assert-eq>
    </result>
  </test-case>
  <test-case name="bin-hex5">
    <description>Test for the hex function.</description>
    <created by="Christian Grün" on="2013-11-19+01:00"/>
    <environment ref="binary"/>
    <test>xs:hexBinary(bin:hex("111"))</test>
    <result>
      <assert-eq>xs:hexBinary("0111")</assert-eq>
    </result>
  </test-case>
  <test-case name="bin-hex6">
    <description>Test for the hex function.</description>
    <created by="Christian Grün" on="2013-11-19+01:00"/>
    <environment ref="binary"/>
    <test>xs:hexBinary(bin:hex("FFF"))</test>
    <result>
      <assert-eq>xs:hexBinary("0FFF")</assert-eq>
    </result>
  </test-case>
  <test-case name="bin-hex7">
    <description>Test for the hex function.</description>
    <created by="Christian Grün" on="2013-11-19+01:00"/>
    <environment ref="binary"/>
    <test>xs:hexBinary(bin:hex("000"))</test>
    <result>
      <assert-eq>xs:hexBinary("0000")</assert-eq>
    </result>
  </test-case>
  <test-case name="bin-hex8">
    <description>Test for the hex function.</description>
    <created by="Christian Grün" on="2013-11-19+01:00"/>
    <environment ref="binary"/>
    <test>xs:hexBinary(bin:hex("FFFFF"))</test>
    <result>
      <assert-eq>xs:hexBinary("0FFFFF")</assert-eq>
    </result>
  </test-case>
  <test-case name="bin-hex9">
    <description>Test for the hex function.</description>
    <created by="Christian Grün" on="2013-11-19+01:00"/>
    <environment ref="binary"/>
    <test>xs:hexBinary(bin:hex("FFFFFFFFFFFFF"))</test>
    <result>
      <assert-eq>xs:hexBinary("0FFFFFFFFFFFFF")</assert-eq>
    </result>
  </test-case>
  <test-case name="bin-hex10">
    <description>Test for the hex function.</description>
    <created by="Christian Grün" on="2013-11-19+01:00"/>
    <environment ref="binary"/>
    <test>xs:hexBinary(bin:hex("10000000000000"))</test>
    <result>
      <assert-eq>xs:hexBinary("10000000000000")</assert-eq>
    </result>
  </test-case>
  <test-case name="bin-hex11">
    <description>Test for the hex function.</description>
    <created by="Christian Grün" on="2013-11-19+01:00"/>
    <environment ref="binary"/>
    <test>xs:hexBinary(bin:hex("10000000000000"))</test>
    <result>
      <assert-eq>xs:hexBinary("10000000000000")</assert-eq>
    </result>
  </test-case>
  <test-case name="bin-hex12">
    <description>Test for the hex function.</description>
    <created by="Christian Grün" on="2013-11-19+01:00"/>
    <environment ref="binary"/>
    <test>bin:hex("11223F4E")</test>
    <result>
      <assert-eq>xs:base64Binary("ESI/Tg==")</assert-eq>
    </result>
  </test-case>
  <test-case name="bin-hex13">
    <description>Test for the hex function.</description>
    <created by="Christian Grün" on="2013-11-19+01:00"/>
    <environment ref="binary"/>
    <test>bin:hex("1223F4E")</test>
    <result>
      <assert-eq>xs:base64Binary("ASI/Tg==")</assert-eq>
    </result>
  </test-case>
  <test-case name="bin-hex14">
    <description>Test for the hex function.</description>
    <created by="Christian Grün" on="2013-11-19+01:00"/>
    <environment ref="binary"/>
    <test>bin:hex("X")</test>
    <result>
      <error code="Q{http://expath.org/ns/binary}non-numeric-character"/>
    </result>
  </test-case>
  <test-case name="bin-bin1">
    <description>Test for the bin function.</description>
    <created by="Christian Grün" on="2013-11-19+01:00"/>
    <environment ref="binary"/>
    <test>xs:hexBinary(bin:bin(()))</test>
    <result>
      <assert-empty/>
    </result>
  </test-case>
  <test-case name="bin-bin2">
    <description>Test for the bin function.</description>
    <created by="Christian Grün" on="2013-11-19+01:00"/>
    <environment ref="binary"/>
    <test>xs:hexBinary(bin:bin(""))</test>
    <result>
      <assert-eq>xs:hexBinary("")</assert-eq>
    </result>
  </test-case>
  <test-case name="bin-bin3">
    <description>Test for the bin function.</description>
    <created by="Christian Grün" on="2013-11-19+01:00"/>
    <environment ref="binary"/>
    <test>xs:hexBinary(bin:bin("0"))</test>
    <result>
      <assert-eq>xs:hexBinary("00")</assert-eq>
    </result>
  </test-case>
  <test-case name="bin-bin4">
    <description>Test for the bin function.</description>
    <created by="Christian Grün" on="2013-11-19+01:00"/>
    <environment ref="binary"/>
    <test>xs:hexBinary(bin:bin("00"))</test>
    <result>
      <assert-eq>xs:hexBinary("00")</assert-eq>
    </result>
  </test-case>
  <test-case name="bin-bin5">
    <description>Test for the bin function.</description>
    <created by="Christian Grün" on="2013-11-19+01:00"/>
    <environment ref="binary"/>
    <test>xs:hexBinary(bin:bin("000000000"))</test>
    <result>
      <assert-eq>xs:hexBinary("0000")</assert-eq>
    </result>
  </test-case>
  <test-case name="bin-bin6">
    <description>Test for the bin function.</description>
    <created by="Christian Grün" on="2013-11-19+01:00"/>
    <environment ref="binary"/>
    <test>xs:hexBinary(bin:bin("1"))</test>
    <result>
      <assert-eq>xs:hexBinary("01")</assert-eq>
    </result>
  </test-case>
  <test-case name="bin-bin7">
    <description>Test for the bin function.</description>
    <created by="Christian Grün" on="2013-11-19+01:00"/>
    <environment ref="binary"/>
    <test>xs:hexBinary(bin:bin("10"))</test>
    <result>
      <assert-eq>xs:hexBinary("02")</assert-eq>
    </result>
  </test-case>
  <test-case name="bin-bin8">
    <description>Test for the bin function.</description>
    <created by="Christian Grün" on="2013-11-19+01:00"/>
    <environment ref="binary"/>
    <test>xs:hexBinary(bin:bin("11111111"))</test>
    <result>
      <assert-eq>xs:hexBinary("FF")</assert-eq>
    </result>
  </test-case>
  <test-case name="bin-bin9">
    <description>Test for the bin function.</description>
    <created by="Christian Grün" on="2013-11-19+01:00"/>
    <environment ref="binary"/>
    <test>xs:hexBinary(bin:bin("111111111"))</test>
    <result>
      <assert-eq>xs:hexBinary("01FF")</assert-eq>
    </result>
  </test-case>
  <test-case name="bin-bin10">
    <description>Test for the bin function.</description>
    <created by="Christian Grün" on="2013-11-19+01:00"/>
    <environment ref="binary"/>
    <test>bin:bin("1101000111010101")</test>
    <result>
      <assert-eq>xs:base64Binary("0dU=")</assert-eq>
    </result>
  </test-case>
  <test-case name="bin-bin11">
    <description>Test for the bin function.</description>
    <created by="Christian Grün" on="2013-11-19+01:00"/>
    <environment ref="binary"/>
    <test>bin:bin("1000111010101")</test>
    <result>
      <assert-eq>xs:base64Binary("EdU=")</assert-eq>
    </result>
  </test-case>
  <test-case name="bin-bin12">
    <description>Test for the bin function.</description>
    <created by="Christian Grün" on="2013-11-19+01:00"/>
    <environment ref="binary"/>
    <test>bin:bin("X")</test>
    <result>
      <error code="Q{http://expath.org/ns/binary}non-numeric-character"/>
    </result>
  </test-case>
  <test-case name="bin-octal1">
    <description>Test for the octal function.</description>
    <created by="Christian Grün" on="2013-11-19+01:00"/>
    <environment ref="binary"/>
    <test>bin:octal(())</test>
    <result>
      <assert-empty/>
    </result>
  </test-case>
  <test-case name="bin-octal2">
    <description>Test for the octal function.</description>
    <created by="Christian Grün" on="2013-11-19+01:00"/>
    <environment ref="binary"/>
    <test>xs:hexBinary(bin:octal(""))</test>
    <result>
      <assert-eq>xs:hexBinary("")</assert-eq>
    </result>
  </test-case>
  <test-case name="bin-octal3">
    <description>Test for the octal function.</description>
    <created by="Christian Grün" on="2013-11-19+01:00"/>
    <environment ref="binary"/>
    <test>xs:hexBinary(bin:octal("0"))</test>
    <result>
      <assert-eq>xs:hexBinary("00")</assert-eq>
    </result>
  </test-case>
  <test-case name="bin-octal4">
    <description>Test for the octal function.</description>
    <created by="Christian Grün" on="2013-11-19+01:00"/>
    <environment ref="binary"/>
    <test>xs:hexBinary(bin:octal("00"))</test>
    <result>
      <assert-eq>xs:hexBinary("00")</assert-eq>
    </result>
  </test-case>
  <test-case name="bin-octal5">
    <description>Test for the octal function.</description>
    <created by="Christian Grün" on="2013-11-19+01:00"/>
    <environment ref="binary"/>
    <test>xs:hexBinary(bin:octal("000"))</test>
    <result>
      <assert-eq>xs:hexBinary("0000")</assert-eq>
    </result>
  </test-case>
  <test-case name="bin-octal6">
    <description>Test for the octal function.</description>
    <created by="Christian Grün" on="2013-11-19+01:00"/>
    <environment ref="binary"/>
    <test>xs:hexBinary(bin:octal("007"))</test>
    <result>
      <assert-eq>xs:hexBinary("0007")</assert-eq>
    </result>
  </test-case>
  <test-case name="bin-octal7">
    <description>Test for the octal function.</description>
    <created by="Christian Grün" on="2013-11-19+01:00"/>
    <environment ref="binary"/>
    <test>xs:hexBinary(bin:octal("1"))</test>
    <result>
      <assert-eq>xs:hexBinary("01")</assert-eq>
    </result>
  </test-case>
  <test-case name="bin-octal8">
    <description>Test for the octal function.</description>
    <created by="Christian Grün" on="2013-11-19+01:00"/>
    <environment ref="binary"/>
    <test>xs:hexBinary(bin:octal("10"))</test>
    <result>
      <assert-eq>xs:hexBinary("08")</assert-eq>
    </result>
  </test-case>
  <test-case name="bin-octal9">
    <description>Test for the octal function.</description>
    <created by="Christian Grün" on="2013-11-19+01:00"/>
    <environment ref="binary"/>
    <test>xs:hexBinary(bin:octal("77"))</test>
    <result>
      <assert-eq>xs:hexBinary("3F")</assert-eq>
    </result>
  </test-case>
  <test-case name="bin-octal10">
    <description>Test for the octal function.</description>
    <created by="Christian Grün" on="2013-11-19+01:00"/>
    <environment ref="binary"/>
    <test>bin:octal("11223047")</test>
    <result>
      <assert-eq>xs:base64Binary("JSYn")</assert-eq>
    </result>
  </test-case>
  <test-case name="bin-octal11">
    <description>Test for the octal function.</description>
    <created by="Christian Grün" on="2013-11-19+01:00"/>
    <environment ref="binary"/>
    <test>bin:octal("X")</test>
    <result>
      <error code="Q{http://expath.org/ns/binary}non-numeric-character"/>
    </result>
  </test-case>
  <test-case name="bin-to-octets1">
    <description>Test for the to-octets function.</description>
    <created by="Christian Grün" on="2013-11-19+01:00"/>
    <environment ref="binary"/>
    <test>bin:to-octets(xs:base64Binary(xs:hexBinary("")))</test>
    <result>
      <assert-empty/>
    </result>
  </test-case>
  <test-case name="bin-to-octets2">
    <description>Test for the to-octets function.</description>
    <created by="Christian Grün" on="2013-11-19+01:00"/>
    <environment ref="binary"/>
    <test>bin:to-octets(xs:base64Binary(xs:hexBinary("00")))</test>
    <result>
      <assert-eq>0</assert-eq>
    </result>
  </test-case>
  <test-case name="bin-to-octets3">
    <description>Test for the to-octets function.</description>
    <created by="Christian Grün" on="2013-11-19+01:00"/>
    <environment ref="binary"/>
    <test>bin:to-octets(xs:base64Binary(xs:hexBinary("FF")))</test>
    <result>
      <assert-eq>255</assert-eq>
    </result>
  </test-case>
  <test-case name="bin-to-octets4">
    <description>Test for the to-octets function.</description>
    <created by="Christian Grün" on="2013-11-19+01:00"/>
    <environment ref="binary"/>
    <test>bin:to-octets(xs:base64Binary(xs:hexBinary("1122")))</test>
    <result>
      <assert-deep-eq>17, 34</assert-deep-eq>
    </result>
  </test-case>
  <test-case name="bin-from-octets1">
    <description>Test for the from-octets function.</description>
    <created by="Christian Grün" on="2013-11-19+01:00"/>
    <environment ref="binary"/>
    <test>xs:hexBinary(bin:from-octets(0))</test>
    <result>
      <assert-eq>xs:hexBinary("00")</assert-eq>
    </result>
  </test-case>
  <test-case name="bin-from-octets2">
    <description>Test for the from-octets function.</description>
    <created by="Christian Grün" on="2013-11-19+01:00"/>
    <environment ref="binary"/>
    <test>xs:hexBinary(bin:from-octets((1,127)))</test>
    <result>
      <assert-eq>xs:hexBinary("017F")</assert-eq>
    </result>
  </test-case>
  <test-case name="bin-from-octets3">
    <description>Test for the from-octets function.</description>
    <created by="Christian Grün" on="2013-11-19+01:00"/>
    <environment ref="binary"/>
    <test>xs:hexBinary(bin:from-octets((128,255)))</test>
    <result>
      <assert-eq>xs:hexBinary("80FF")</assert-eq>
    </result>
  </test-case>
  <test-case name="bin-from-octets4">
    <description>Test for the from-octets function.</description>
    <created by="Christian Grün" on="2013-11-19+01:00"/>
    <environment ref="binary"/>
    <test>bin:from-octets(-1)</test>
    <result>
      <error code="Q{http://expath.org/ns/binary}octet-out-of-range"/>
    </result>
  </test-case>
  <test-case name="bin-from-octets5">
    <description>Test for the from-octets function.</description>
    <created by="Christian Grün" on="2013-11-19+01:00"/>
    <environment ref="binary"/>
    <test>bin:from-octets(256)</test>
    <result>
      <error code="Q{http://expath.org/ns/binary}octet-out-of-range"/>
    </result>
  </test-case>
  <test-case name="bin-length1">
    <description>Test for the length function.</description>
    <created by="Christian Grün" on="2013-11-19+01:00"/>
    <environment ref="binary"/>
    <test>bin:length(xs:base64Binary(xs:hexBinary("")))</test>
    <result>
      <assert-eq>0</assert-eq>
    </result>
  </test-case>
  <test-case name="bin-length2">
    <description>Test for the length function.</description>
    <created by="Christian Grün" on="2013-11-19+01:00"/>
    <environment ref="binary"/>
    <test>bin:length(xs:base64Binary(xs:hexBinary("FF")))</test>
    <result>
      <assert-eq>1</assert-eq>
    </result>
  </test-case>
  <test-case name="bin-length3">
    <description>Test for the length function.</description>
    <created by="Christian Grün" on="2013-11-19+01:00"/>
    <environment ref="binary"/>
    <test>bin:length(xs:base64Binary(xs:hexBinary("12345678")))</test>
    <result>
      <assert-eq>4</assert-eq>
    </result>
  </test-case>
  <test-case name="bin-part1">
    <description>Test for the part function.</description>
    <created by="Christian Grün" on="2013-11-19+01:00"/>
    <environment ref="binary"/>
    <test>xs:hexBinary(bin:part((), 0))</test>
    <result>
      <assert-empty/>
    </result>
  </test-case>
  <test-case name="bin-part2">
    <description>Test for the part function.</description>
    <created by="Christian Grün" on="2013-11-19+01:00"/>
    <environment ref="binary"/>
    <test>xs:hexBinary(bin:part(xs:base64Binary(xs:hexBinary("FF")), 0))</test>
    <result>
      <assert-eq>xs:hexBinary("FF")</assert-eq>
    </result>
  </test-case>
  <test-case name="bin-part3">
    <description>Test for the part function.</description>
    <created by="Christian Grün" on="2013-11-19+01:00"/>
    <environment ref="binary"/>
    <test>xs:hexBinary(bin:part(xs:base64Binary(xs:hexBinary("FF")), 0, 1))</test>
    <result>
      <assert-eq>xs:hexBinary("FF")</assert-eq>
    </result>
  </test-case>
  <test-case name="bin-part4">
    <description>Test for the part function.</description>
    <created by="Christian Grün" on="2013-11-19+01:00"/>
    <environment ref="binary"/>
    <test>xs:hexBinary(bin:part(xs:base64Binary(xs:hexBinary("FF")), 1))</test>
    <result>
      <assert-eq>xs:hexBinary("")</assert-eq>
    </result>
  </test-case>
  <test-case name="bin-part5">
    <description>Test for the part function.</description>
    <created by="Christian Grün" on="2013-11-19+01:00"/>
    <environment ref="binary"/>
    <test>xs:hexBinary(bin:part(xs:base64Binary(xs:hexBinary("FF")), 1, 0))</test>
    <result>
      <assert-eq>xs:hexBinary("")</assert-eq>
    </result>
  </test-case>
  <test-case name="bin-part6">
    <description>Test for the part function.</description>
    <created by="Christian Grün" on="2013-11-19+01:00"/>
    <environment ref="binary"/>
    <test>bin:part(xs:base64Binary(xs:hexBinary("FF")), -1)</test>
    <result>
      <error code="Q{http://expath.org/ns/binary}index-out-of-range"/>
    </result>
  </test-case>
  <test-case name="bin-part7">
    <description>Test for the part function.</description>
    <created by="Christian Grün" on="2013-11-19+01:00"/>
    <environment ref="binary"/>
    <test>bin:part(xs:base64Binary(xs:hexBinary("FF")), 0, -1)</test>
    <result>
      <error code="Q{http://expath.org/ns/binary}negative-size"/>
    </result>
  </test-case>
  <test-case name="bin-part8">
    <description>Test for the part function.</description>
    <created by="Christian Grün" on="2013-11-19+01:00"/>
    <environment ref="binary"/>
    <test>bin:part(xs:base64Binary(xs:hexBinary("FF")), 2)</test>
    <result>
      <error code="Q{http://expath.org/ns/binary}index-out-of-range"/>
    </result>
  </test-case>
  <test-case name="bin-part9">
    <description>Test for the part function.</description>
    <created by="Christian Grün" on="2013-11-19+01:00"/>
    <environment ref="binary"/>
    <test>bin:part(xs:base64Binary(xs:hexBinary("FF")), 0, 2)</test>
    <result>
      <error code="Q{http://expath.org/ns/binary}index-out-of-range"/>
    </result>
  </test-case>
  <test-case name="bin-join1">
    <description>Test for the join function.</description>
    <created by="Christian Grün" on="2013-11-19+01:00"/>
    <environment ref="binary"/>
    <test>xs:hexBinary(bin:join(()))</test>
    <result>
      <assert-eq>xs:hexBinary("")</assert-eq>
    </result>
  </test-case>
  <test-case name="bin-join2">
    <description>Test for the join function.</description>
    <created by="Christian Grün" on="2013-11-19+01:00"/>
    <environment ref="binary"/>
    <test>xs:hexBinary(bin:join(xs:base64Binary(xs:hexBinary(""))))</test>
    <result>
      <assert-eq>xs:hexBinary("")</assert-eq>
    </result>
  </test-case>
  <test-case name="bin-join3">
    <description>Test for the join function.</description>
    <created by="Christian Grün" on="2013-11-19+01:00"/>
    <environment ref="binary"/>
    <test>xs:hexBinary(bin:join(xs:base64Binary(xs:hexBinary("FF"))))</test>
    <result>
      <assert-eq>xs:hexBinary("FF")</assert-eq>
    </result>
  </test-case>
  <test-case name="bin-join4">
    <description>Test for the join function.</description>
    <created by="Christian Grün" on="2013-11-19+01:00"/>
    <environment ref="binary"/>
    <test>xs:hexBinary(bin:join((xs:base64Binary(xs:hexBinary("FF")), xs:base64Binary(xs:hexBinary("FF")))))</test>
    <result>
      <assert-eq>xs:hexBinary("FFFF")</assert-eq>
    </result>
  </test-case>
  <test-case name="bin-join5">
    <description>Test for the join function.</description>
    <created by="Christian Grün" on="2013-11-19+01:00"/>
    <modified by="John Lumley" on="2014-10-02" change="dependent on XP30"/>
    <environment ref="binary"/>
    <dependency type="spec" value="XP30+ XQ30+"/>
    <test>xs:hexBinary(bin:join((1 to 3) ! xs:base64Binary(xs:hexBinary("11"))))</test>
    <result>
      <assert-eq>xs:hexBinary("111111")</assert-eq>
    </result>
  </test-case>
  <test-case name="bin-insert-before1">
    <description>Test for the insert-before function.</description>
    <created by="Christian Grün" on="2013-11-19+01:00"/>
    <environment ref="binary"/>
    <test>xs:hexBinary(bin:insert-before((), 0, ()))</test>
    <result>
      <assert-empty/>
    </result>
  </test-case>
  <test-case name="bin-insert-before2">
    <description>Test for the insert-before function.</description>
    <created by="Christian Grün" on="2013-11-19+01:00"/>
    <environment ref="binary"/>
    <test>xs:hexBinary(bin:insert-before(xs:base64Binary(xs:hexBinary("12")), 0, ()))</test>
    <result>
      <assert-eq>xs:hexBinary("12")</assert-eq>
    </result>
  </test-case>
  <test-case name="bin-insert-before3">
    <description>Test for the insert-before function.</description>
    <created by="Christian Grün" on="2013-11-19+01:00"/>
    <environment ref="binary"/>
    <test>xs:hexBinary(bin:insert-before(xs:base64Binary(xs:hexBinary("12")), 1, ()))</test>
    <result>
      <assert-eq>xs:hexBinary("12")</assert-eq>
    </result>
  </test-case>
  <test-case name="bin-insert-before4">
    <description>Test for the insert-before function.</description>
    <created by="Christian Grün" on="2013-11-19+01:00"/>
    <environment ref="binary"/>
    <test>xs:hexBinary(bin:insert-before(xs:base64Binary(xs:hexBinary("1234")), 0, xs:base64Binary(xs:hexBinary("56"))))</test>
    <result>
      <assert-eq>xs:hexBinary("561234")</assert-eq>
    </result>
  </test-case>
  <test-case name="bin-insert-before5">
    <description>Test for the insert-before function.</description>
    <created by="Christian Grün" on="2013-11-19+01:00"/>
    <environment ref="binary"/>
    <test>xs:hexBinary(bin:insert-before(xs:base64Binary(xs:hexBinary("1234")), 1, xs:base64Binary(xs:hexBinary("56"))))</test>
    <result>
      <assert-eq>xs:hexBinary("125634")</assert-eq>
    </result>
  </test-case>
  <test-case name="bin-insert-before6">
    <description>Test for the insert-before function.</description>
    <created by="Christian Grün" on="2013-11-19+01:00"/>
    <environment ref="binary"/>
    <test>xs:hexBinary(bin:insert-before(xs:base64Binary(xs:hexBinary("1234")), 2, xs:base64Binary(xs:hexBinary("56"))))</test>
    <result>
      <assert-eq>xs:hexBinary("123456")</assert-eq>
    </result>
  </test-case>
  <test-case name="bin-insert-before7">
    <description>Test for the insert-before function.</description>
    <created by="Christian Grün" on="2013-11-19+01:00"/>
    <environment ref="binary"/>
    <test>xs:hexBinary(bin:insert-before(xs:base64Binary(xs:hexBinary("12")), 0, xs:base64Binary(xs:hexBinary("3456"))))</test>
    <result>
      <assert-eq>xs:hexBinary("345612")</assert-eq>
    </result>
  </test-case>
  <test-case name="bin-insert-before8">
    <description>Test for the insert-before function.</description>
    <created by="Christian Grün" on="2013-11-19+01:00"/>
    <environment ref="binary"/>
    <test>xs:hexBinary(bin:insert-before(xs:base64Binary(xs:hexBinary("12")), 1, xs:base64Binary(xs:hexBinary("3456"))))</test>
    <result>
      <assert-eq>xs:hexBinary("123456")</assert-eq>
    </result>
  </test-case>
  <test-case name="bin-insert-before9">
    <description>Test for the insert-before function.</description>
    <created by="Christian Grün" on="2013-11-19+01:00"/>
    <environment ref="binary"/>
    <test>xs:hexBinary(bin:insert-before(xs:base64Binary(xs:hexBinary("12")), 1, xs:base64Binary(xs:hexBinary("34"))))</test>
    <result>
      <assert-eq>xs:hexBinary("1234")</assert-eq>
    </result>
  </test-case>
  <test-case name="bin-insert-before10">
    <description>Test for the insert-before function.</description>
    <created by="Christian Grün" on="2013-11-19+01:00"/>
    <environment ref="binary"/>
    <test>bin:insert-before(xs:base64Binary(xs:hexBinary("")), -1, ())</test>
    <result>
      <error code="Q{http://expath.org/ns/binary}index-out-of-range"/>
    </result>
  </test-case>
  <test-case name="bin-insert-before11">
    <description>Test for the insert-before function.</description>
    <created by="Christian Grün" on="2013-11-19+01:00"/>
    <environment ref="binary"/>
    <test>bin:insert-before(xs:base64Binary(xs:hexBinary("")), 1, ())</test>
    <result>
      <error code="Q{http://expath.org/ns/binary}index-out-of-range"/>
    </result>
  </test-case>
  <test-case name="bin-pad-left1">
    <description>Test for the pad-left function.</description>
    <created by="Christian Grün" on="2013-11-19+01:00"/>
    <environment ref="binary"/>
    <test>xs:hexBinary(bin:pad-left(xs:base64Binary(xs:hexBinary("")), 1))</test>
    <result>
      <assert-eq>xs:hexBinary("00")</assert-eq>
    </result>
  </test-case>
  <test-case name="bin-pad-left2">
    <description>Test for the pad-left function.</description>
    <created by="Christian Grün" on="2013-11-19+01:00"/>
    <environment ref="binary"/>
    <test>xs:hexBinary(bin:pad-left(xs:base64Binary(xs:hexBinary("")), 1, 255))</test>
    <result>
      <assert-eq>xs:hexBinary("FF")</assert-eq>
    </result>
  </test-case>
  <test-case name="bin-pad-left3">
    <description>Test for the pad-left function.</description>
    <created by="Christian Grün" on="2013-11-19+01:00"/>
    <environment ref="binary"/>
    <test>xs:hexBinary(bin:pad-left(xs:base64Binary(xs:hexBinary("01")), 2, 127))</test>
    <result>
      <assert-eq>xs:hexBinary("7F7F01")</assert-eq>
    </result>
  </test-case>
  <test-case name="bin-pad-left4">
    <description>Test for the pad-left function.</description>
    <created by="Christian Grün" on="2013-11-19+01:00"/>
    <environment ref="binary"/>
    <test>bin:pad-left(xs:base64Binary(xs:hexBinary("")), -1)</test>
    <result>
      <error code="Q{http://expath.org/ns/binary}negative-size"/>
    </result>
  </test-case>
  <test-case name="bin-pad-left5">
    <description>Test for the pad-left function.</description>
    <created by="Christian Grün" on="2013-11-19+01:00"/>
    <environment ref="binary"/>
    <test>bin:pad-left(xs:base64Binary(xs:hexBinary("")), 0, 256)</test>
    <result>
     <error code="Q{http://expath.org/ns/binary}octet-out-of-range"/>
    </result>
  </test-case>
  <test-case name="bin-pad-right1">
    <description>Test for the pad-right function.</description>
    <created by="Christian Grün" on="2013-11-19+01:00"/>
    <environment ref="binary"/>
    <test>xs:hexBinary(bin:pad-right(xs:base64Binary(xs:hexBinary("")), 1))</test>
    <result>
      <assert-eq>xs:hexBinary("00")</assert-eq>
    </result>
  </test-case>
  <test-case name="bin-pad-right2">
    <description>Test for the pad-right function.</description>
    <created by="Christian Grün" on="2013-11-19+01:00"/>
    <environment ref="binary"/>
    <test>xs:hexBinary(bin:pad-right(xs:base64Binary(xs:hexBinary("")), 1, 255))</test>
    <result>
      <assert-eq>xs:hexBinary("FF")</assert-eq>
    </result>
  </test-case>
  <test-case name="bin-pad-right3">
    <description>Test for the pad-right function.</description>
    <created by="Christian Grün" on="2013-11-19+01:00"/>
    <environment ref="binary"/>
    <test>xs:hexBinary(bin:pad-right(xs:base64Binary(xs:hexBinary("01")), 2, 127))</test>
    <result>
      <assert-eq>xs:hexBinary("017F7F")</assert-eq>
    </result>
  </test-case>
  <test-case name="bin-pad-right4">
    <description>Test for the pad-right function.</description>
    <created by="Christian Grün" on="2013-11-19+01:00"/>
    <environment ref="binary"/>
    <test>bin:pad-right(xs:base64Binary(xs:hexBinary("")), -1)</test>
    <result>
      <error code="Q{http://expath.org/ns/binary}negative-size"/>
    </result>
  </test-case>
  <test-case name="bin-pad-right5">
    <description>Test for the pad-right function.</description>
    <created by="Christian Grün" on="2013-11-19+01:00"/>
    <environment ref="binary"/>
    <test>bin:pad-right(xs:base64Binary(xs:hexBinary("")), 0, 256)</test>
    <result>
      <error code="Q{http://expath.org/ns/binary}octet-out-of-range"/>
    </result>
  </test-case>
  <test-case name="bin-find1">
    <description>Test for the find function.</description>
    <created by="Christian Grün" on="2013-11-19+01:00"/>
    <environment ref="binary"/>
    <test>bin:find(xs:base64Binary(xs:hexBinary("1122")), 0, xs:base64Binary(xs:hexBinary("11")))</test>
    <result>
      <assert-eq>0</assert-eq>
    </result>
  </test-case>
  <test-case name="bin-find2">
    <description>Test for the find function.</description>
    <created by="Christian Grün" on="2013-11-19+01:00"/>
    <environment ref="binary"/>
    <test>bin:find(xs:base64Binary(xs:hexBinary("1122")), 1, xs:base64Binary(xs:hexBinary("11")))</test>
    <result>
      <assert-empty/>
    </result>
  </test-case>
  <test-case name="bin-find3">
    <description>Test for the find function.</description>
    <created by="Christian Grün" on="2013-11-19+01:00"/>
    <environment ref="binary"/>
    <test>bin:find(xs:base64Binary(xs:hexBinary("112233")), 0, xs:base64Binary(xs:hexBinary("22")))</test>
    <result>
      <assert-eq>1</assert-eq>
    </result>
  </test-case>
  <test-case name="bin-find4">
    <description>Test for the find function.</description>
    <created by="Christian Grün" on="2013-11-19+01:00"/>
    <environment ref="binary"/>
    <test>bin:find(xs:base64Binary(xs:hexBinary("")), -1, xs:base64Binary(xs:hexBinary("11")))</test>
    <result>
      <error code="Q{http://expath.org/ns/binary}index-out-of-range"/>
    </result>
  </test-case>
  <test-case name="bin-find5">
    <description>Test for the find function.</description>
    <created by="Christian Grün" on="2013-11-19+01:00"/>
    <environment ref="binary"/>
    <test>bin:find(xs:base64Binary(xs:hexBinary("")), 1, xs:base64Binary(xs:hexBinary("11")))</test>
    <result>
      <error code="Q{http://expath.org/ns/binary}index-out-of-range"/>
    </result>
  </test-case>
  <test-case name="bin-find6">
    <description>Test for the find function.</description>
    <created by="Christian Grün" on="2013-11-19+01:00"/>
    <environment ref="binary"/>
    <test>bin:find(xs:base64Binary(xs:hexBinary("")), 0, xs:base64Binary(xs:hexBinary("")))</test>
    <result>
      <assert-eq>0</assert-eq>
      <!--<error code="Q{http://expath.org/ns/binary}empty-search-item"/>-->
    </result>
  </test-case>
  <test-case name="bin-decode-string1">
    <description>Test for the decode-string function.</description>
    <created by="Christian Grün" on="2013-11-19+01:00"/>
    <modified by="John Lumley" on="2014-08-13" change="changed assertion type to string from integer"/>
    <environment ref="binary"/>
    <test>bin:decode-string(xs:base64Binary(xs:hexBinary("3132")), "US-ASCII")</test>
    <result>
      <assert-eq>'12'</assert-eq>
    </result>
  </test-case>
  <test-case name="bin-decode-string2">
    <description>Test for the decode-string function.</description>
    <created by="Christian Grün" on="2013-11-19+01:00"/>
    <environment ref="binary"/>
    <test>bin:decode-string(xs:base64Binary(xs:hexBinary("3132")), "UTF-8")</test>
    <result>
      <assert-eq>'12'</assert-eq>
    </result>
  </test-case>
  <test-case name="bin-decode-string3">
    <description>Test for the decode-string function.</description>
    <created by="Christian Grün" on="2013-11-19+01:00"/>
    <environment ref="binary"/>
    <test>bin:decode-string(xs:base64Binary(xs:hexBinary("313233")), "UTF-8", 1, 1)</test>
    <result>
      <assert-eq>'2'</assert-eq>
    </result>
  </test-case>
  <test-case name="bin-decode-string4">
    <description>Test for the decode-string function.</description>
    <created by="Christian Grün" on="2013-11-19+01:00"/>
    <environment ref="binary"/>
    <test>bin:decode-string(xs:base64Binary(xs:hexBinary("")), "UTF-8", -1)</test>
    <result>
      <error code="Q{http://expath.org/ns/binary}index-out-of-range"/>
    </result>
  </test-case>
  <test-case name="bin-decode-string5">
    <description>Test for the decode-string function.</description>
    <created by="Christian Grün" on="2013-11-19+01:00"/>
    <environment ref="binary"/>
    <test>bin:decode-string(xs:base64Binary(xs:hexBinary("")), "UTF-8", 0, -1)</test>
    <result>
      <error code="Q{http://expath.org/ns/binary}negative-size"/>
    </result>
  </test-case>
  <test-case name="bin-decode-string6">
    <description>Test for the decode-string function.</description>
    <created by="Christian Grün" on="2013-11-19+01:00"/>
    <environment ref="binary"/>
    <test>bin:decode-string(xs:base64Binary(xs:hexBinary("")), "UTF-8", 1, 0)</test>
    <result>
      <error code="Q{http://expath.org/ns/binary}index-out-of-range"/>
    </result>
  </test-case>
  <test-case name="bin-decode-string7">
    <description>Test for the decode-string function.</description>
    <created by="Christian Grün" on="2013-11-19+01:00"/>
    <environment ref="binary"/>
    <test>bin:decode-string(xs:base64Binary(xs:hexBinary("")), "UTF-8", 0, 1)</test>
    <result>
      <error code="Q{http://expath.org/ns/binary}index-out-of-range"/>
    </result>
  </test-case>
  <test-case name="bin-decode-string8">
    <description>Test for the decode-string function.</description>
    <created by="Christian Grün" on="2013-11-19+01:00"/>
    <environment ref="binary"/>
    <test>bin:decode-string(xs:base64Binary(xs:hexBinary("")), "X")</test>
    <result>
      <error code="Q{http://expath.org/ns/binary}unknown-encoding"/>
    </result>
  </test-case>
  <test-case name="bin-decode-string9">
    <description>Test for the decode-string function.</description>
    <created by="Christian Grün" on="2013-11-19+01:00"/>
    <environment ref="binary"/>
    <test>bin:decode-string(xs:base64Binary(xs:hexBinary("FF")), "UTF-8")</test>
    <result>
      <error code="Q{http://expath.org/ns/binary}conversion-error"/>
    </result>
  </test-case>
  <test-case name="bin-encode-string1">
    <description>Test for the encode-string function.</description>
    <created by="Christian Grün" on="2013-11-19+01:00"/>
    <environment ref="binary"/>
    <test>xs:hexBinary(bin:encode-string("", "US-ASCII"))</test>
    <result>
      <assert-eq>xs:hexBinary("")</assert-eq>
    </result>
  </test-case>
  <test-case name="bin-encode-string2">
    <description>Test for the encode-string function.</description>
    <created by="Christian Grün" on="2013-11-19+01:00"/>
    <environment ref="binary"/>
    <test>xs:hexBinary(bin:encode-string("a", "US-ASCII"))</test>
    <result>
      <assert-eq>xs:hexBinary("61")</assert-eq>
    </result>
  </test-case>
  <test-case name="bin-encode-string3">
    <description>Test for the encode-string function.</description>
    <created by="Christian Grün" on="2013-11-19+01:00"/>
    <environment ref="binary"/>
    <test>xs:hexBinary(bin:encode-string("&#196;", "UTF-8"))</test>
    <result>
      <assert-eq>xs:hexBinary("C384")</assert-eq>
    </result>
  </test-case>
  <test-case name="bin-encode-string4">
    <description>Test for the encode-string function.</description>
    <created by="Christian Grün" on="2013-11-19+01:00"/>
    <environment ref="binary"/>
    <test>bin:encode-string("", "X")</test>
    <result>
      <error code="Q{http://expath.org/ns/binary}unknown-encoding"/>
    </result>
  </test-case>
  <test-case name="bin-encode-string5">
    <description>Test for the encode-string function.</description>
    <created by="Christian Grün" on="2013-11-19+01:00"/>
    <environment ref="binary"/>
    <test>bin:encode-string("&#196;", "US-ASCII")</test>
    <result>
      <error code="Q{http://expath.org/ns/binary}conversion-error"/>
    </result>
  </test-case>
  <test-case name="bin-pack-double1">
    <description>Test for the pack-double function.</description>
    <created by="Christian Grün" on="2013-11-19+01:00"/>
    <environment ref="binary"/>
    <test>xs:hexBinary(bin:pack-double(0))</test>
    <result>
      <assert-eq>xs:hexBinary("0000000000000000")</assert-eq>
    </result>
  </test-case>
  <test-case name="bin-pack-double2">
    <description>Test for the pack-double function.</description>
    <created by="Christian Grün" on="2013-11-19+01:00"/>
    <environment ref="binary"/>
    <test>xs:hexBinary(bin:pack-double(1))</test>
    <result>
      <assert-eq>xs:hexBinary("3FF0000000000000")</assert-eq>
    </result>
  </test-case>
  <test-case name="bin-pack-double3">
    <description>Test for the pack-double function.</description>
    <created by="Christian Grün" on="2013-11-19+01:00"/>
    <environment ref="binary"/>
    <test>xs:hexBinary(bin:pack-double(-1))</test>
    <result>
      <assert-eq>xs:hexBinary("BFF0000000000000")</assert-eq>
    </result>
  </test-case>
  <test-case name="bin-pack-double4">
    <description>Test for the pack-double function.</description>
    <created by="Christian Grün" on="2013-11-19+01:00"/>
    <environment ref="binary"/>
    <test>xs:hexBinary(bin:pack-double(-0e0))</test>
    <result>
      <assert-eq>xs:hexBinary("8000000000000000")</assert-eq>
    </result>
  </test-case>
  <test-case name="bin-pack-double5">
    <description>Test for the pack-double function.</description>
    <created by="Christian Grün" on="2013-11-19+01:00"/>
    <environment ref="binary"/>
    <test>xs:hexBinary(bin:pack-double(0e0))</test>
    <result>
      <assert-eq>xs:hexBinary("0000000000000000")</assert-eq>
    </result>
  </test-case>
  <test-case name="bin-pack-double6">
    <description>Test for the pack-double function.</description>
    <created by="Christian Grün" on="2013-11-19+01:00"/>
    <environment ref="binary"/>
    <test>xs:hexBinary(bin:pack-double(xs:double('INF')))</test>
    <result>
      <assert-eq>xs:hexBinary("7FF0000000000000")</assert-eq>
    </result>
  </test-case>
  <test-case name="bin-pack-double7">
    <description>Test for the pack-double function.</description>
    <created by="Christian Grün" on="2013-11-19+01:00"/>
    <environment ref="binary"/>
    <test>xs:hexBinary(bin:pack-double(xs:double('-INF')))</test>
    <result>
      <assert-eq>xs:hexBinary("FFF0000000000000")</assert-eq>
    </result>
  </test-case>
  <test-case name="bin-pack-double8">
    <description>Test for the pack-double function.</description>
    <created by="Christian Grün" on="2013-11-19+01:00"/>
    <environment ref="binary"/>
    <test>xs:hexBinary(bin:pack-double(xs:double('NaN')))</test>
    <result>
      <assert-eq>xs:hexBinary("7FF8000000000000")</assert-eq>
    </result>
  </test-case>
  <test-case name="bin-pack-double9">
    <description>Test for the pack-double function.</description>
    <created by="Christian Grün" on="2013-11-19+01:00"/>
    <environment ref="binary"/>
    <test>xs:hexBinary(bin:pack-double(1, "most-significant-first"))</test>
    <result>
      <assert-eq>xs:hexBinary("3FF0000000000000")</assert-eq>
    </result>
  </test-case>
  <test-case name="bin-pack-double10">
    <description>Test for the pack-double function.</description>
    <created by="Christian Grün" on="2013-11-19+01:00"/>
    <environment ref="binary"/>
    <test>xs:hexBinary(bin:pack-double(1, "big-endian"))</test>
    <result>
      <assert-eq>xs:hexBinary("3FF0000000000000")</assert-eq>
    </result>
  </test-case>
  <test-case name="bin-pack-double11">
    <description>Test for the pack-double function.</description>
    <created by="Christian Grün" on="2013-11-19+01:00"/>
    <environment ref="binary"/>
    <test>xs:hexBinary(bin:pack-double(1, "BE"))</test>
    <result>
      <assert-eq>xs:hexBinary("3FF0000000000000")</assert-eq>
    </result>
  </test-case>
  <test-case name="bin-pack-double12">
    <description>Test for the pack-double function.</description>
    <created by="Christian Grün" on="2013-11-19+01:00"/>
    <environment ref="binary"/>
    <test>xs:hexBinary(bin:pack-double(1, "least-significant-first"))</test>
    <result>
      <assert-eq>xs:hexBinary("000000000000F03F")</assert-eq>
    </result>
  </test-case>
  <test-case name="bin-pack-double13">
    <description>Test for the pack-double function.</description>
    <created by="Christian Grün" on="2013-11-19+01:00"/>
    <environment ref="binary"/>
    <test>xs:hexBinary(bin:pack-double(1, "little-endian"))</test>
    <result>
      <assert-eq>xs:hexBinary("000000000000F03F")</assert-eq>
    </result>
  </test-case>
  <test-case name="bin-pack-double14">
    <description>Test for the pack-double function.</description>
    <created by="Christian Grün" on="2013-11-19+01:00"/>
    <environment ref="binary"/>
    <test>xs:hexBinary(bin:pack-double(1, "LE"))</test>
    <result>
      <assert-eq>xs:hexBinary("000000000000F03F")</assert-eq>
    </result>
  </test-case>
  <test-case name="bin-pack-double15">
    <description>Test for the pack-double function.</description>
    <created by="Christian Grün" on="2013-11-19+01:00"/>
    <environment ref="binary"/>
    <test>bin:pack-double(1, "X")</test>
    <result>
      <error code="Q{http://expath.org/ns/binary}unknown-significance-order"/>
    </result>
  </test-case>
  <test-case name="bin-pack-float1">
    <description>Test for the pack-float function.</description>
    <created by="Christian Grün" on="2013-11-19+01:00"/>
    <environment ref="binary"/>
    <test>xs:hexBinary(bin:pack-float(0))</test>
    <result>
      <assert-eq>xs:hexBinary("00000000")</assert-eq>
    </result>
  </test-case>
  <test-case name="bin-pack-float2">
    <description>Test for the pack-float function.</description>
    <created by="Christian Grün" on="2013-11-19+01:00"/>
    <environment ref="binary"/>
    <test>xs:hexBinary(bin:pack-float(1))</test>
    <result>
      <assert-eq>xs:hexBinary("3F800000")</assert-eq>
    </result>
  </test-case>
  <test-case name="bin-pack-float3">
    <description>Test for the pack-float function.</description>
    <created by="Christian Grün" on="2013-11-19+01:00"/>
    <environment ref="binary"/>
    <test>xs:hexBinary(bin:pack-float(-1))</test>
    <result>
      <assert-eq>xs:hexBinary("BF800000")</assert-eq>
    </result>
  </test-case>
  <test-case name="bin-pack-float4">
    <description>Test for the pack-float function.</description>
    <created by="Christian Grün" on="2013-11-19+01:00"/>
    <environment ref="binary"/>
    <test>xs:hexBinary(bin:pack-float(xs:float(-0e0)))</test>
    <result>
      <assert-eq>xs:hexBinary("80000000")</assert-eq>
    </result>
  </test-case>
  <test-case name="bin-pack-float5">
    <description>Test for the pack-float function.</description>
    <created by="Christian Grün" on="2013-11-19+01:00"/>
    <environment ref="binary"/>
    <test>xs:hexBinary(bin:pack-float(xs:float(0e0)))</test>
    <result>
      <assert-eq>xs:hexBinary("00000000")</assert-eq>
    </result>
  </test-case>
  <test-case name="bin-pack-float6">
    <description>Test for the pack-float function.</description>
    <created by="Christian Grün" on="2013-11-19+01:00"/>
    <environment ref="binary"/>
    <test>xs:hexBinary(bin:pack-float(xs:float('INF')))</test>
    <result>
      <assert-eq>xs:hexBinary("7F800000")</assert-eq>
    </result>
  </test-case>
  <test-case name="bin-pack-float7">
    <description>Test for the pack-float function.</description>
    <created by="Christian Grün" on="2013-11-19+01:00"/>
    <environment ref="binary"/>
    <test>xs:hexBinary(bin:pack-float(xs:float('-INF')))</test>
    <result>
      <assert-eq>xs:hexBinary("FF800000")</assert-eq>
    </result>
  </test-case>
  <test-case name="bin-pack-float8">
    <description>Test for the pack-float function.</description>
    <created by="Christian Grün" on="2013-11-19+01:00"/>
    <environment ref="binary"/>
    <test>xs:hexBinary(bin:pack-float(xs:float('NaN')))</test>
    <result>
      <assert-eq>xs:hexBinary("7FC00000")</assert-eq>
    </result>
  </test-case>
  <test-case name="bin-pack-float9">
    <description>Test for the pack-float function.</description>
    <created by="Christian Grün" on="2013-11-19+01:00"/>
    <environment ref="binary"/>
    <test>xs:hexBinary(bin:pack-float(1, "most-significant-first"))</test>
    <result>
      <assert-eq>xs:hexBinary("3F800000")</assert-eq>
    </result>
  </test-case>
  <test-case name="bin-pack-float10">
    <description>Test for the pack-float function.</description>
    <created by="Christian Grün" on="2013-11-19+01:00"/>
    <environment ref="binary"/>
    <test>xs:hexBinary(bin:pack-float(1, "big-endian"))</test>
    <result>
      <assert-eq>xs:hexBinary("3F800000")</assert-eq>
    </result>
  </test-case>
  <test-case name="bin-pack-float11">
    <description>Test for the pack-float function.</description>
    <created by="Christian Grün" on="2013-11-19+01:00"/>
    <environment ref="binary"/>
    <test>xs:hexBinary(bin:pack-float(1, "BE"))</test>
    <result>
      <assert-eq>xs:hexBinary("3F800000")</assert-eq>
    </result>
  </test-case>
  <test-case name="bin-pack-float12">
    <description>Test for the pack-float function.</description>
    <created by="Christian Grün" on="2013-11-19+01:00"/>
    <environment ref="binary"/>
    <test>xs:hexBinary(bin:pack-float(1, "least-significant-first"))</test>
    <result>
      <assert-eq>xs:hexBinary("0000803F")</assert-eq>
    </result>
  </test-case>
  <test-case name="bin-pack-float13">
    <description>Test for the pack-float function.</description>
    <created by="Christian Grün" on="2013-11-19+01:00"/>
    <environment ref="binary"/>
    <test>xs:hexBinary(bin:pack-float(1, "little-endian"))</test>
    <result>
      <assert-eq>xs:hexBinary("0000803F")</assert-eq>
    </result>
  </test-case>
  <test-case name="bin-pack-float14">
    <description>Test for the pack-float function.</description>
    <created by="Christian Grün" on="2013-11-19+01:00"/>
    <environment ref="binary"/>
    <test>xs:hexBinary(bin:pack-float(1, "LE"))</test>
    <result>
      <assert-eq>xs:hexBinary("0000803F")</assert-eq>
    </result>
  </test-case>
  <test-case name="bin-pack-float15">
    <description>Test for the pack-float function.</description>
    <created by="Christian Grün" on="2013-11-19+01:00"/>
    <environment ref="binary"/>
    <test>bin:pack-float(1, "X")</test>
    <result>
      <error code="Q{http://expath.org/ns/binary}unknown-significance-order"/>
    </result>
  </test-case>
  <test-case name="bin-pack-integer1">
    <description>Test for the pack-integer function.</description>
    <created by="Christian Grün" on="2013-11-19+01:00"/>
    <environment ref="binary"/>
    <test>xs:hexBinary(bin:pack-integer(1, 0))</test>
    <result>
      <assert-eq>xs:hexBinary("")</assert-eq>
    </result>
  </test-case>
  <test-case name="bin-pack-integer2">
    <description>Test for the pack-integer function.</description>
    <created by="Christian Grün" on="2013-11-19+01:00"/>
    <environment ref="binary"/>
    <test>xs:hexBinary(bin:pack-integer(1, 1))</test>
    <result>
      <assert-eq>xs:hexBinary("01")</assert-eq>
    </result>
  </test-case>
  <test-case name="bin-pack-integer3">
    <description>Test for the pack-integer function.</description>
    <created by="Christian Grün" on="2013-11-19+01:00"/>
    <environment ref="binary"/>
    <test>xs:hexBinary(bin:pack-integer(1, 2))</test>
    <result>
      <assert-eq>xs:hexBinary("0001")</assert-eq>
    </result>
  </test-case>
  <test-case name="bin-pack-integer4">
    <description>Test for the pack-integer function.</description>
    <created by="Christian Grün" on="2013-11-19+01:00"/>
    <environment ref="binary"/>
    <test>xs:hexBinary(bin:pack-integer(9223372036854775807, 8))</test>
    <result>
      <assert-eq>xs:hexBinary("7FFFFFFFFFFFFFFF")</assert-eq>
    </result>
  </test-case>
  <test-case name="bin-pack-integer5">
    <description>Test for the pack-integer function.</description>
    <created by="Christian Grün" on="2013-11-19+01:00"/>
    <environment ref="binary"/>
    <test>xs:hexBinary(bin:pack-integer(-1, 8))</test>
    <result>
      <assert-eq>xs:hexBinary("FFFFFFFFFFFFFFFF")</assert-eq>
    </result>
  </test-case>
  <test-case name="bin-pack-integer6">
    <description>Test for the pack-integer function.</description>
    <created by="Christian Grün" on="2013-11-19+01:00"/>
    <environment ref="binary"/>
    <test>xs:hexBinary(bin:pack-integer(-1, 9))</test>
    <result>
      <assert-eq>xs:hexBinary("FFFFFFFFFFFFFFFFFF")</assert-eq>
    </result>
  </test-case>
  <test-case name="bin-pack-integer7">
    <description>Test for the pack-integer function.</description>
    <created by="Christian Grün" on="2013-11-19+01:00"/>
    <environment ref="binary"/>
    <test>xs:hexBinary(bin:pack-integer(1, 2, "most-significant-first"))</test>
    <result>
      <assert-eq>xs:hexBinary("0001")</assert-eq>
    </result>
  </test-case>
  <test-case name="bin-pack-integer8">
    <description>Test for the pack-integer function.</description>
    <created by="Christian Grün" on="2013-11-19+01:00"/>
    <environment ref="binary"/>
    <test>xs:hexBinary(bin:pack-integer(1, 2, "big-endian"))</test>
    <result>
      <assert-eq>xs:hexBinary("0001")</assert-eq>
    </result>
  </test-case>
  <test-case name="bin-pack-integer9">
    <description>Test for the pack-integer function.</description>
    <created by="Christian Grün" on="2013-11-19+01:00"/>
    <environment ref="binary"/>
    <test>xs:hexBinary(bin:pack-integer(1, 2, "BE"))</test>
    <result>
      <assert-eq>xs:hexBinary("0001")</assert-eq>
    </result>
  </test-case>
  <test-case name="bin-pack-integer10">
    <description>Test for the pack-integer function.</description>
    <created by="Christian Grün" on="2013-11-19+01:00"/>
    <environment ref="binary"/>
    <test>xs:hexBinary(bin:pack-integer(1, 2, "least-significant-first"))</test>
    <result>
      <assert-eq>xs:hexBinary("0100")</assert-eq>
    </result>
  </test-case>
  <test-case name="bin-pack-integer11">
    <description>Test for the pack-integer function.</description>
    <created by="Christian Grün" on="2013-11-19+01:00"/>
    <environment ref="binary"/>
    <test>xs:hexBinary(bin:pack-integer(1, 2, "little-endian"))</test>
    <result>
      <assert-eq>xs:hexBinary("0100")</assert-eq>
    </result>
  </test-case>
  <test-case name="bin-pack-integer12">
    <description>Test for the pack-integer function.</description>
    <created by="Christian Grün" on="2013-11-19+01:00"/>
    <environment ref="binary"/>
    <test>xs:hexBinary(bin:pack-integer(1, 2, "LE"))</test>
    <result>
      <assert-eq>xs:hexBinary("0100")</assert-eq>
    </result>
  </test-case>
  <test-case name="bin-pack-integer13">
    <description>Test for the pack-integer function.</description>
    <created by="Christian Grün" on="2013-11-19+01:00"/>
    <environment ref="binary"/>
    <test>bin:pack-integer(1, -1)</test>
    <result>
      <error code="Q{http://expath.org/ns/binary}negative-size"/>
    </result>
  </test-case>
  <test-case name="bin-pack-integer14">
    <description>Test for the pack-integer function.</description>
    <created by="Christian Grün" on="2013-11-19+01:00"/>
    <environment ref="binary"/>
    <test>bin:pack-integer(1, 1, "X")</test>
    <result>
      <error code="Q{http://expath.org/ns/binary}unknown-significance-order"/>
    </result>
  </test-case>
  <test-case name="bin-unpack-double1">
    <description>Test for the unpack-double function.</description>
    <created by="Christian Grün" on="2013-11-19+01:00"/>
    <environment ref="binary"/>
    <test>bin:unpack-double(xs:base64Binary(xs:hexBinary("0000000000000000")), 0)</test>
    <result>
      <assert-eq>0</assert-eq>
    </result>
  </test-case>
  <test-case name="bin-unpack-double2">
    <description>Test for the unpack-double function.</description>
    <created by="Christian Grün" on="2013-11-19+01:00"/>
    <environment ref="binary"/>
    <test>bin:unpack-double(xs:base64Binary(xs:hexBinary("3FF0000000000000")), 0)</test>
    <result>
      <assert-eq>1</assert-eq>
    </result>
  </test-case>
  <test-case name="bin-unpack-double3">
    <description>Test for the unpack-double function.</description>
    <created by="Christian Grün" on="2013-11-19+01:00"/>
    <environment ref="binary"/>
    <test>bin:unpack-double(xs:base64Binary(xs:hexBinary("BFF0000000000000")), 0)</test>
    <result>
      <assert-eq>-1</assert-eq>
    </result>
  </test-case>
  <test-case name="bin-unpack-double4">
    <description>Test for the unpack-double function.</description>
    <created by="Christian Grün" on="2013-11-19+01:00"/>
    <environment ref="binary"/>
    <test>bin:unpack-double(xs:base64Binary(xs:hexBinary("8000000000000000")), 0)</test>
    <result>
      <assert-eq>-0</assert-eq>
    </result>
  </test-case>
  <test-case name="bin-unpack-double5">
    <description>Test for the unpack-double function.</description>
    <created by="Christian Grün" on="2013-11-19+01:00"/>
    <environment ref="binary"/>
    <test>bin:unpack-double(xs:base64Binary(xs:hexBinary("0000000000000000")), 0)</test>
    <result>
      <assert-eq>0</assert-eq>
    </result>
  </test-case>
  <test-case name="bin-unpack-double6">
    <description>Test for the unpack-double function.</description>
    <created by="Christian Grün" on="2013-11-19+01:00"/>
    <environment ref="binary"/>
    <test>bin:unpack-double(xs:base64Binary(xs:hexBinary("7FF0000000000000")), 0)</test>
    <result>
      <assert-eq>1 div 0e0</assert-eq>
    </result>
  </test-case>
  <test-case name="bin-unpack-double7">
    <description>Test for the unpack-double function.</description>
    <created by="Christian Grün" on="2013-11-19+01:00"/>
    <environment ref="binary"/>
    <test>bin:unpack-double(xs:base64Binary(xs:hexBinary("FFF0000000000000")), 0)</test>
    <result>
      <assert-eq>-1 div 0e0</assert-eq>
    </result>
  </test-case>
  <test-case name="bin-unpack-double8">
    <description>Test for the unpack-double function.</description>
    <created by="Christian Grün" on="2013-11-19+01:00"/>
    <environment ref="binary"/>
    <test>bin:unpack-double(xs:base64Binary(xs:hexBinary("7FF8000000000000")), 0)</test>
    <result>
      <assert-deep-eq>number("NaN")</assert-deep-eq>
    </result>
  </test-case>
  <test-case name="bin-unpack-double9">
    <description>Test for the unpack-double function.</description>
    <created by="Christian Grün" on="2013-11-19+01:00"/>
    <environment ref="binary"/>
    <test>bin:unpack-double(xs:base64Binary(xs:hexBinary("3FF0000000000000")), 0, "most-significant-first")</test>
    <result>
      <assert-eq>1</assert-eq>
    </result>
  </test-case>
  <test-case name="bin-unpack-double10">
    <description>Test for the unpack-double function.</description>
    <created by="Christian Grün" on="2013-11-19+01:00"/>
    <environment ref="binary"/>
    <test>bin:unpack-double(xs:base64Binary(xs:hexBinary("3FF0000000000000")), 0, "big-endian")</test>
    <result>
      <assert-eq>1</assert-eq>
    </result>
  </test-case>
  <test-case name="bin-unpack-double11">
    <description>Test for the unpack-double function.</description>
    <created by="Christian Grün" on="2013-11-19+01:00"/>
    <environment ref="binary"/>
    <test>bin:unpack-double(xs:base64Binary(xs:hexBinary("3FF0000000000000")), 0, "BE")</test>
    <result>
      <assert-eq>1</assert-eq>
    </result>
  </test-case>
  <test-case name="bin-unpack-double12">
    <description>Test for the unpack-double function.</description>
    <created by="Christian Grün" on="2013-11-19+01:00"/>
    <environment ref="binary"/>
    <test>bin:unpack-double(xs:base64Binary(xs:hexBinary("000000000000F03F")), 0, "least-significant-first")</test>
    <result>
      <assert-eq>1</assert-eq>
    </result>
  </test-case>
  <test-case name="bin-unpack-double13">
    <description>Test for the unpack-double function.</description>
    <created by="Christian Grün" on="2013-11-19+01:00"/>
    <environment ref="binary"/>
    <test>bin:unpack-double(xs:base64Binary(xs:hexBinary("000000000000F03F")), 0, "little-endian")</test>
    <result>
      <assert-eq>1</assert-eq>
    </result>
  </test-case>
  <test-case name="bin-unpack-double14">
    <description>Test for the unpack-double function.</description>
    <created by="Christian Grün" on="2013-11-19+01:00"/>
    <environment ref="binary"/>
    <test>bin:unpack-double(xs:base64Binary(xs:hexBinary("000000000000F03F")), 0, "LE")</test>
    <result>
      <assert-eq>1</assert-eq>
    </result>
  </test-case>
  <test-case name="bin-unpack-double15">
    <description>Test for the unpack-double function.</description>
    <created by="Christian Grün" on="2013-11-19+01:00"/>
    <environment ref="binary"/>
    <test>bin:unpack-double(xs:base64Binary(xs:hexBinary("0000000000000000")), -1)</test>
    <result>
      <error code="Q{http://expath.org/ns/binary}index-out-of-range"/>
    </result>
  </test-case>
  <test-case name="bin-unpack-double16">
    <description>Test for the unpack-double function.</description>
    <created by="Christian Grün" on="2013-11-19+01:00"/>
    <environment ref="binary"/>
    <test>bin:unpack-double(xs:base64Binary(xs:hexBinary("0000000000000000")), 1)</test>
    <result>
      <error code="Q{http://expath.org/ns/binary}index-out-of-range"/>
    </result>
  </test-case>
  <test-case name="bin-unpack-double17">
    <description>Test for the unpack-double function.</description>
    <created by="Christian Grün" on="2013-11-19+01:00"/>
    <environment ref="binary"/>
    <test>bin:unpack-double(xs:base64Binary(xs:hexBinary("00")), 0)</test>
    <result>
      <error code="Q{http://expath.org/ns/binary}index-out-of-range"/>
    </result>
  </test-case>
  <test-case name="bin-unpack-double18">
    <description>Test for the unpack-double function.</description>
    <created by="Christian Grün" on="2013-11-19+01:00"/>
    <environment ref="binary"/>
    <test>bin:unpack-double(xs:base64Binary(xs:hexBinary("0000000000000000")), 0, "X")</test>
    <result>
      <error code="Q{http://expath.org/ns/binary}unknown-significance-order"/>
    </result>
  </test-case>
  <test-case name="bin-unpack-float1">
    <description>Test for the unpack-float function.</description>
    <created by="Christian Grün" on="2013-11-19+01:00"/>
    <environment ref="binary"/>
    <test>bin:unpack-float(xs:base64Binary(xs:hexBinary("00000000")), 0)</test>
    <result>
      <assert-eq>0</assert-eq>
    </result>
  </test-case>
  <test-case name="bin-unpack-float2">
    <description>Test for the unpack-float function.</description>
    <created by="Christian Grün" on="2013-11-19+01:00"/>
    <environment ref="binary"/>
    <test>bin:unpack-float(xs:base64Binary(xs:hexBinary("3F800000")), 0)</test>
    <result>
      <assert-eq>1</assert-eq>
    </result>
  </test-case>
  <test-case name="bin-unpack-float3">
    <description>Test for the unpack-float function.</description>
    <created by="Christian Grün" on="2013-11-19+01:00"/>
    <environment ref="binary"/>
    <test>bin:unpack-float(xs:base64Binary(xs:hexBinary("BF800000")), 0)</test>
    <result>
      <assert-eq>-1</assert-eq>
    </result>
  </test-case>
  <test-case name="bin-unpack-float4">
    <description>Test for the unpack-float function.</description>
    <created by="Christian Grün" on="2013-11-19+01:00"/>
    <environment ref="binary"/>
    <test>bin:unpack-float(xs:base64Binary(xs:hexBinary("80000000")), 0)</test>
    <result>
      <assert-eq>-0</assert-eq>
    </result>
  </test-case>
  <test-case name="bin-unpack-float5">
    <description>Test for the unpack-float function.</description>
    <created by="Christian Grün" on="2013-11-19+01:00"/>
    <environment ref="binary"/>
    <test>bin:unpack-float(xs:base64Binary(xs:hexBinary("00000000")), 0)</test>
    <result>
      <assert-eq>0</assert-eq>
    </result>
  </test-case>
  <test-case name="bin-unpack-float6">
    <description>Test for the unpack-float function.</description>
    <created by="Christian Grün" on="2013-11-19+01:00"/>
    <environment ref="binary"/>
    <test>bin:unpack-float(xs:base64Binary(xs:hexBinary("7F800000")), 0)</test>
    <result>
      <assert-eq>1 div 0e0</assert-eq>
    </result>
  </test-case>
  <test-case name="bin-unpack-float7">
    <description>Test for the unpack-float function.</description>
    <created by="Christian Grün" on="2013-11-19+01:00"/>
    <environment ref="binary"/>
    <test>bin:unpack-float(xs:base64Binary(xs:hexBinary("FF800000")), 0)</test>
    <result>
      <assert-eq>-1 div 0e0</assert-eq>
    </result>
  </test-case>
  <test-case name="bin-unpack-float8">
    <description>Test for the unpack-float function.</description>
    <created by="Christian Grün" on="2013-11-19+01:00"/>
    <environment ref="binary"/>
    <test>bin:unpack-float(xs:base64Binary(xs:hexBinary("7FC00000")), 0)</test>
    <result>
      <assert-deep-eq>number("NaN")</assert-deep-eq>
    </result>
  </test-case>
  <test-case name="bin-unpack-float9">
    <description>Test for the unpack-float function.</description>
    <created by="Christian Grün" on="2013-11-19+01:00"/>
    <environment ref="binary"/>
    <test>bin:unpack-float(xs:base64Binary(xs:hexBinary("3F800000")), 0, "most-significant-first")</test>
    <result>
      <assert-eq>1</assert-eq>
    </result>
  </test-case>
  <test-case name="bin-unpack-float10">
    <description>Test for the unpack-float function.</description>
    <created by="Christian Grün" on="2013-11-19+01:00"/>
    <environment ref="binary"/>
    <test>bin:unpack-float(xs:base64Binary(xs:hexBinary("3F800000")), 0, "big-endian")</test>
    <result>
      <assert-eq>1</assert-eq>
    </result>
  </test-case>
  <test-case name="bin-unpack-float11">
    <description>Test for the unpack-float function.</description>
    <created by="Christian Grün" on="2013-11-19+01:00"/>
    <environment ref="binary"/>
    <test>bin:unpack-float(xs:base64Binary(xs:hexBinary("3F800000")), 0, "BE")</test>
    <result>
      <assert-eq>1</assert-eq>
    </result>
  </test-case>
  <test-case name="bin-unpack-float12">
    <description>Test for the unpack-float function.</description>
    <created by="Christian Grün" on="2013-11-19+01:00"/>
    <environment ref="binary"/>
    <test>bin:unpack-float(xs:base64Binary(xs:hexBinary("0000803F")), 0, "least-significant-first")</test>
    <result>
      <assert-eq>1</assert-eq>
    </result>
  </test-case>
  <test-case name="bin-unpack-float13">
    <description>Test for the unpack-float function.</description>
    <created by="Christian Grün" on="2013-11-19+01:00"/>
    <environment ref="binary"/>
    <test>bin:unpack-float(xs:base64Binary(xs:hexBinary("0000803F")), 0, "little-endian")</test>
    <result>
      <assert-eq>1</assert-eq>
    </result>
  </test-case>
  <test-case name="bin-unpack-float14">
    <description>Test for the unpack-float function.</description>
    <created by="Christian Grün" on="2013-11-19+01:00"/>
    <environment ref="binary"/>
    <test>bin:unpack-float(xs:base64Binary(xs:hexBinary("0000803F")), 0, "LE")</test>
    <result>
      <assert-eq>1</assert-eq>
    </result>
  </test-case>
  <test-case name="bin-unpack-float15">
    <description>Test for the unpack-float function.</description>
    <created by="Christian Grün" on="2013-11-19+01:00"/>
    <environment ref="binary"/>
    <test>bin:unpack-float(xs:base64Binary(xs:hexBinary("00000000")), -1)</test>
    <result>
      <error code="Q{http://expath.org/ns/binary}index-out-of-range"/>
    </result>
  </test-case>
  <test-case name="bin-unpack-float16">
    <description>Test for the unpack-float function.</description>
    <created by="Christian Grün" on="2013-11-19+01:00"/>
    <environment ref="binary"/>
    <test>bin:unpack-float(xs:base64Binary(xs:hexBinary("00000000")), 1)</test>
    <result>
      <error code="Q{http://expath.org/ns/binary}index-out-of-range"/>
    </result>
  </test-case>
  <test-case name="bin-unpack-float17">
    <description>Test for the unpack-float function.</description>
    <created by="Christian Grün" on="2013-11-19+01:00"/>
    <environment ref="binary"/>
    <test>bin:unpack-float(xs:base64Binary(xs:hexBinary("00")), 0)</test>
    <result>
      <error code="Q{http://expath.org/ns/binary}index-out-of-range"/>
    </result>
  </test-case>
  <test-case name="bin-unpack-float18">
    <description>Test for the unpack-float function.</description>
    <created by="Christian Grün" on="2013-11-19+01:00"/>
    <environment ref="binary"/>
    <test>bin:unpack-float(xs:base64Binary(xs:hexBinary("00000000")), 0, "X")</test>
    <result>
      <error code="Q{http://expath.org/ns/binary}unknown-significance-order"/>
    </result>
  </test-case>
  <test-case name="bin-unpack-integer1">
    <description>Test for the unpack-integer function.</description>
    <created by="Christian Grün" on="2013-11-19+01:00"/>
    <environment ref="binary"/>
    <test>bin:unpack-integer(xs:base64Binary(xs:hexBinary("01")), 0, 0)</test>
    <result>
      <assert-eq>0</assert-eq>
    </result>
  </test-case>
  <test-case name="bin-unpack-integer2">
    <description>Test for the unpack-integer function.</description>
    <created by="Christian Grün" on="2013-11-19+01:00"/>
    <environment ref="binary"/>
    <test>bin:unpack-integer(xs:base64Binary(xs:hexBinary("01")), 0, 1)</test>
    <result>
      <assert-eq>1</assert-eq>
    </result>
  </test-case>
  <test-case name="bin-unpack-integer3">
    <description>Test for the unpack-integer function.</description>
    <created by="Christian Grün" on="2013-11-19+01:00"/>
    <environment ref="binary"/>
    <test>bin:unpack-integer(xs:base64Binary(xs:hexBinary("FF")), 0, 1)</test>
    <result>
      <assert-eq>-1</assert-eq>
    </result>
  </test-case>
  <test-case name="bin-unpack-integer4">
    <description>Test for the unpack-integer function.</description>
    <created by="Christian Grün" on="2013-11-19+01:00"/>
    <environment ref="binary"/>
    <test>bin:unpack-integer(xs:base64Binary(xs:hexBinary("0001")), 0, 2)</test>
    <result>
      <assert-eq>1</assert-eq>
    </result>
  </test-case>
  <test-case name="bin-unpack-integer5">
    <description>Test for the unpack-integer function.</description>
    <created by="Christian Grün" on="2013-11-19+01:00"/>
    <environment ref="binary"/>
    <test>bin:unpack-integer(xs:base64Binary(xs:hexBinary("7FFF")), 0, 2)</test>
    <result>
      <assert-eq>32767</assert-eq>
    </result>
  </test-case>
  <test-case name="bin-unpack-integer6">
    <description>Test for the unpack-integer function.</description>
    <created by="Christian Grün" on="2013-11-19+01:00"/>
    <environment ref="binary"/>
    <test>bin:unpack-integer(xs:base64Binary(xs:hexBinary("FFFF")), 0, 2)</test>
    <result>
      <assert-eq>-1</assert-eq>
    </result>
  </test-case>
  <test-case name="bin-unpack-integer7">
    <description>Test for the unpack-integer function.</description>
    <created by="Christian Grün" on="2013-11-19+01:00"/>
    <environment ref="binary"/>
    <test>bin:unpack-integer(xs:base64Binary(xs:hexBinary("0001")), 0, 2, "most-significant-first")</test>
    <result>
      <assert-eq>1</assert-eq>
    </result>
  </test-case>
  <test-case name="bin-unpack-integer8">
    <description>Test for the unpack-integer function.</description>
    <created by="Christian Grün" on="2013-11-19+01:00"/>
    <environment ref="binary"/>
    <test>bin:unpack-integer(xs:base64Binary(xs:hexBinary("0001")), 0, 2, "big-endian")</test>
    <result>
      <assert-eq>1</assert-eq>
    </result>
  </test-case>
  <test-case name="bin-unpack-integer9">
    <description>Test for the unpack-integer function.</description>
    <created by="Christian Grün" on="2013-11-19+01:00"/>
    <environment ref="binary"/>
    <test>bin:unpack-integer(xs:base64Binary(xs:hexBinary("0001")), 0, 2, "BE")</test>
    <result>
      <assert-eq>1</assert-eq>
    </result>
  </test-case>
  <test-case name="bin-unpack-integer10">
    <description>Test for the unpack-integer function.</description>
    <created by="Christian Grün" on="2013-11-19+01:00"/>
    <environment ref="binary"/>
    <test>bin:unpack-integer(xs:base64Binary(xs:hexBinary("0100")), 0, 2, "least-significant-first")</test>
    <result>
      <assert-eq>1</assert-eq>
    </result>
  </test-case>
  <test-case name="bin-unpack-integer11">
    <description>Test for the unpack-integer function.</description>
    <created by="Christian Grün" on="2013-11-19+01:00"/>
    <environment ref="binary"/>
    <test>bin:unpack-integer(xs:base64Binary(xs:hexBinary("0100")), 0, 2, "little-endian")</test>
    <result>
      <assert-eq>1</assert-eq>
    </result>
  </test-case>
  <test-case name="bin-unpack-integer12">
    <description>Test for the unpack-integer function.</description>
    <created by="Christian Grün" on="2013-11-19+01:00"/>
    <environment ref="binary"/>
    <test>bin:unpack-integer(xs:base64Binary(xs:hexBinary("0100")), 0, 2, "LE")</test>
    <result>
      <assert-eq>1</assert-eq>
    </result>
  </test-case>
  <test-case name="bin-unpack-integer13">
    <description>Test for the unpack-integer function.</description>
    <created by="Christian Grün" on="2013-11-19+01:00"/>
    <environment ref="binary"/>
    <test>bin:unpack-integer(xs:base64Binary(xs:hexBinary("00")), -1, 0)</test>
    <result>
      <error code="Q{http://expath.org/ns/binary}index-out-of-range"/>
    </result>
  </test-case>
  <test-case name="bin-unpack-integer14">
    <description>Test for the unpack-integer function.</description>
    <created by="Christian Grün" on="2013-11-19+01:00"/>
    <environment ref="binary"/>
    <test>bin:unpack-integer(xs:base64Binary(xs:hexBinary("00")), 0, -1)</test>
    <result>
      <error code="Q{http://expath.org/ns/binary}negative-size"/>
    </result>
  </test-case>
  <test-case name="bin-unpack-integer15">
    <description>Test for the unpack-integer function.</description>
    <created by="Christian Grün" on="2013-11-19+01:00"/>
    <environment ref="binary"/>
    <test>bin:unpack-integer(xs:base64Binary(xs:hexBinary("00")), 0, 2)</test>
    <result>
      <error code="Q{http://expath.org/ns/binary}index-out-of-range"/>
    </result>
  </test-case>
  <test-case name="bin-unpack-integer16">
    <description>Test for the unpack-integer function.</description>
    <created by="Christian Grün" on="2013-11-19+01:00"/>
    <environment ref="binary"/>
    <test>bin:unpack-integer(xs:base64Binary(xs:hexBinary("00")), 0, 0, "X")</test>
    <result>
      <error code="Q{http://expath.org/ns/binary}unknown-significance-order"/>
    </result>
  </test-case>
  <test-case name="bin-unpack-unsigned-integer1">
    <description>Test for the unpack-unsigned-integer function.</description>
    <created by="Christian Grün" on="2013-11-19+01:00"/>
    <environment ref="binary"/>
    <test>bin:unpack-unsigned-integer(xs:base64Binary(xs:hexBinary("01")), 0, 0)</test>
    <result>
      <assert-eq>0</assert-eq>
    </result>
  </test-case>
  <test-case name="bin-unpack-unsigned-integer2">
    <description>Test for the unpack-unsigned-integer function.</description>
    <created by="Christian Grün" on="2013-11-19+01:00"/>
    <environment ref="binary"/>
    <test>bin:unpack-unsigned-integer(xs:base64Binary(xs:hexBinary("01")), 0, 1)</test>
    <result>
      <assert-eq>1</assert-eq>
    </result>
  </test-case>
  <test-case name="bin-unpack-unsigned-integer3">
    <description>Test for the unpack-unsigned-integer function.</description>
    <created by="Christian Grün" on="2013-11-19+01:00"/>
    <environment ref="binary"/>
    <test>bin:unpack-unsigned-integer(xs:base64Binary(xs:hexBinary("FF")), 0, 1)</test>
    <result>
      <assert-eq>255</assert-eq>
    </result>
  </test-case>
  <test-case name="bin-unpack-unsigned-integer4">
    <description>Test for the unpack-unsigned-integer function.</description>
    <created by="Christian Grün" on="2013-11-19+01:00"/>
    <environment ref="binary"/>
    <test>bin:unpack-unsigned-integer(xs:base64Binary(xs:hexBinary("0001")), 0, 2)</test>
    <result>
      <assert-eq>1</assert-eq>
    </result>
  </test-case>
  <test-case name="bin-unpack-unsigned-integer5">
    <description>Test for the unpack-unsigned-integer function.</description>
    <created by="Christian Grün" on="2013-11-19+01:00"/>
    <environment ref="binary"/>
    <test>bin:unpack-unsigned-integer(xs:base64Binary(xs:hexBinary("7FFF")), 0, 2)</test>
    <result>
      <assert-eq>32767</assert-eq>
    </result>
  </test-case>
  <test-case name="bin-unpack-unsigned-integer6">
    <description>Test for the unpack-unsigned-integer function.</description>
    <created by="Christian Grün" on="2013-11-19+01:00"/>
    <environment ref="binary"/>
    <test>bin:unpack-unsigned-integer(xs:base64Binary(xs:hexBinary("FFFF")), 0, 2)</test>
    <result>
      <assert-eq>65535</assert-eq>
    </result>
  </test-case>
  <test-case name="bin-unpack-unsigned-integer7">
    <description>Test for the unpack-unsigned-integer function.</description>
    <created by="Christian Grün" on="2013-11-19+01:00"/>
    <environment ref="binary"/>
    <test>bin:unpack-unsigned-integer(xs:base64Binary(xs:hexBinary("FFFFFFFF")), 0, 4)</test>
    <result>
      <assert-eq>4294967295</assert-eq>
    </result>
  </test-case>
  <test-case name="bin-unpack-unsigned-integer8">
    <description>Test for the unpack-unsigned-integer function.</description>
    <created by="Christian Grün" on="2013-11-19+01:00"/>
    <environment ref="binary"/>
    <test>bin:unpack-unsigned-integer(xs:base64Binary(xs:hexBinary("01FFFFFFFF")), 0, 5)</test>
    <result>
      <assert-eq>8589934591</assert-eq>
    </result>
  </test-case>
  <test-case name="bin-unpack-unsigned-integer9">
    <description>Test for the unpack-unsigned-integer function.</description>
    <created by="Christian Grün" on="2013-11-19+01:00"/>
    <environment ref="binary"/>
    <test>bin:unpack-unsigned-integer(xs:base64Binary(xs:hexBinary("FFFFFFFFFF")), 0, 5)</test>
    <result>
      <assert-eq>1099511627775</assert-eq>
    </result>
  </test-case>
  <test-case name="bin-unpack-unsigned-integer10">
    <description>Test for the unpack-unsigned-integer function.</description>
    <created by="Christian Grün" on="2013-11-19+01:00"/>
    <environment ref="binary"/>
    <test>bin:unpack-unsigned-integer(xs:base64Binary(xs:hexBinary("FFFFFFFFFFFF")), 0, 6)</test>
    <result>
      <assert-eq>281474976710655</assert-eq>
    </result>
  </test-case>
  <test-case name="bin-unpack-unsigned-integer11">
    <description>Test for the unpack-unsigned-integer function.</description>
    <created by="Christian Grün" on="2013-11-19+01:00"/>
    <environment ref="binary"/>
    <test>bin:unpack-unsigned-integer(xs:base64Binary(xs:hexBinary("0001")), 0, 2, "most-significant-first")</test>
    <result>
      <assert-eq>1</assert-eq>
    </result>
  </test-case>
  <test-case name="bin-unpack-unsigned-integer12">
    <description>Test for the unpack-unsigned-integer function.</description>
    <created by="Christian Grün" on="2013-11-19+01:00"/>
    <environment ref="binary"/>
    <test>bin:unpack-unsigned-integer(xs:base64Binary(xs:hexBinary("0001")), 0, 2, "big-endian")</test>
    <result>
      <assert-eq>1</assert-eq>
    </result>
  </test-case>
  <test-case name="bin-unpack-unsigned-integer13">
    <description>Test for the unpack-unsigned-integer function.</description>
    <created by="Christian Grün" on="2013-11-19+01:00"/>
    <environment ref="binary"/>
    <test>bin:unpack-unsigned-integer(xs:base64Binary(xs:hexBinary("0001")), 0, 2, "BE")</test>
    <result>
      <assert-eq>1</assert-eq>
    </result>
  </test-case>
  <test-case name="bin-unpack-unsigned-integer14">
    <description>Test for the unpack-unsigned-integer function.</description>
    <created by="Christian Grün" on="2013-11-19+01:00"/>
    <environment ref="binary"/>
    <test>bin:unpack-unsigned-integer(xs:base64Binary(xs:hexBinary("0100")), 0, 2, "least-significant-first")</test>
    <result>
      <assert-eq>1</assert-eq>
    </result>
  </test-case>
  <test-case name="bin-unpack-unsigned-integer15">
    <description>Test for the unpack-unsigned-integer function.</description>
    <created by="Christian Grün" on="2013-11-19+01:00"/>
    <environment ref="binary"/>
    <test>bin:unpack-unsigned-integer(xs:base64Binary(xs:hexBinary("0100")), 0, 2, "little-endian")</test>
    <result>
      <assert-eq>1</assert-eq>
    </result>
  </test-case>
  <test-case name="bin-unpack-unsigned-integer16">
    <description>Test for the unpack-unsigned-integer function.</description>
    <created by="Christian Grün" on="2013-11-19+01:00"/>
    <environment ref="binary"/>
    <test>bin:unpack-unsigned-integer(xs:base64Binary(xs:hexBinary("0100")), 0, 2, "LE")</test>
    <result>
      <assert-eq>1</assert-eq>
    </result>
  </test-case>
  <test-case name="bin-unpack-unsigned-integer17">
    <description>Test for the unpack-unsigned-integer function.</description>
    <created by="Christian Grün" on="2013-11-19+01:00"/>
    <environment ref="binary"/>
    <test>bin:unpack-unsigned-integer(xs:base64Binary(xs:hexBinary("00")), -1, 0)</test>
    <result>
      <error code="Q{http://expath.org/ns/binary}index-out-of-range"/>
    </result>
  </test-case>
  <test-case name="bin-unpack-unsigned-integer18">
    <description>Test for the unpack-unsigned-integer function.</description>
    <created by="Christian Grün" on="2013-11-19+01:00"/>
    <environment ref="binary"/>
    <test>bin:unpack-unsigned-integer(xs:base64Binary(xs:hexBinary("00")), 0, -1)</test>
    <result>
      <error code="Q{http://expath.org/ns/binary}negative-size"/>
    </result>
  </test-case>
  <test-case name="bin-unpack-unsigned-integer19">
    <description>Test for the unpack-unsigned-integer function.</description>
    <created by="Christian Grün" on="2013-11-19+01:00"/>
    <environment ref="binary"/>
    <test>bin:unpack-unsigned-integer(xs:base64Binary(xs:hexBinary("00")), 0, 2)</test>
    <result>
      <error code="Q{http://expath.org/ns/binary}index-out-of-range"/>
    </result>
  </test-case>
  <test-case name="bin-unpack-unsigned-integer20">
    <description>Test for the unpack-unsigned-integer function.</description>
    <created by="Christian Grün" on="2013-11-19+01:00"/>
    <environment ref="binary"/>
    <test>bin:unpack-unsigned-integer(xs:base64Binary(xs:hexBinary("00")), 0, 0, "X")</test>
    <result>
      <error code="Q{http://expath.org/ns/binary}unknown-significance-order"/>
    </result>
  </test-case>
  <test-case name="bin-or1">
    <description>Test for the or function.</description>
    <created by="Christian Grün" on="2013-11-19+01:00"/>
    <environment ref="binary"/>
    <test>xs:hexBinary(bin:or((), xs:base64Binary(xs:hexBinary("00"))))</test>
    <result>
      <assert-empty/>
    </result>
  </test-case>
  <test-case name="bin-or2">
    <description>Test for the or function.</description>
    <created by="Christian Grün" on="2013-11-19+01:00"/>
    <environment ref="binary"/>
    <test>xs:hexBinary(bin:or(xs:base64Binary(xs:hexBinary("00")), ()))</test>
    <result>
      <assert-empty/>
    </result>
  </test-case>
  <test-case name="bin-or3">
    <description>Test for the or function.</description>
    <created by="Christian Grün" on="2013-11-19+01:00"/>
    <environment ref="binary"/>
    <test>xs:hexBinary(bin:or(xs:base64Binary(xs:hexBinary("")), xs:base64Binary(xs:hexBinary(""))))</test>
    <result>
      <assert-eq>xs:hexBinary("")</assert-eq>
    </result>
  </test-case>
  <test-case name="bin-or4">
    <description>Test for the or function.</description>
    <created by="Christian Grün" on="2013-11-19+01:00"/>
    <environment ref="binary"/>
    <test>xs:hexBinary(bin:or(xs:base64Binary(xs:hexBinary("8081")), xs:base64Binary(xs:hexBinary("7F7E"))))</test>
    <result>
      <assert-eq>xs:hexBinary("FFFF")</assert-eq>
    </result>
  </test-case>
  <test-case name="bin-or5">
    <description>Test for the or function.</description>
    <created by="Christian Grün" on="2013-11-19+01:00"/>
    <environment ref="binary"/>
    <test>bin:or(xs:base64Binary(xs:hexBinary("00")), xs:base64Binary(xs:hexBinary("")))</test>
    <result>
      <error code="Q{http://expath.org/ns/binary}differing-length-arguments"/>
    </result>
  </test-case>
  <test-case name="bin-xor1">
    <description>Test for the xor function.</description>
    <created by="Christian Grün" on="2013-11-19+01:00"/>
    <environment ref="binary"/>
    <test>xs:hexBinary(bin:xor((), xs:base64Binary(xs:hexBinary("00"))))</test>
    <result>
      <assert-empty/>
    </result>
  </test-case>
  <test-case name="bin-xor2">
    <description>Test for the xor function.</description>
    <created by="Christian Grün" on="2013-11-19+01:00"/>
    <environment ref="binary"/>
    <test>xs:hexBinary(bin:xor(xs:base64Binary(xs:hexBinary("00")), ()))</test>
    <result>
      <assert-empty/>
    </result>
  </test-case>
  <test-case name="bin-xor3">
    <description>Test for the xor function.</description>
    <created by="Christian Grün" on="2013-11-19+01:00"/>
    <environment ref="binary"/>
    <test>xs:hexBinary(bin:xor(xs:base64Binary(xs:hexBinary("")), xs:base64Binary(xs:hexBinary(""))))</test>
    <result>
      <assert-eq>xs:hexBinary("")</assert-eq>
    </result>
  </test-case>
  <test-case name="bin-xor4">
    <description>Test for the xor function.</description>
    <created by="Christian Grün" on="2013-11-19+01:00"/>
    <environment ref="binary"/>
    <test>xs:hexBinary(bin:xor(xs:base64Binary(xs:hexBinary("80")), xs:base64Binary(xs:hexBinary("7F"))))</test>
    <result>
      <assert-eq>xs:hexBinary("FF")</assert-eq>
    </result>
  </test-case>
  <test-case name="bin-xor5">
    <description>Test for the xor function.</description>
    <created by="Christian Grün" on="2013-11-19+01:00"/>
    <environment ref="binary"/>
    <test>xs:hexBinary(bin:xor(xs:base64Binary(xs:hexBinary("1234")), xs:base64Binary(xs:hexBinary("4321"))))</test>
    <result>
      <assert-eq>xs:hexBinary("5115")</assert-eq>
    </result>
  </test-case>
  <test-case name="bin-xor6">
    <description>Test for the xor function.</description>
    <created by="Christian Grün" on="2013-11-19+01:00"/>
    <environment ref="binary"/>
    <test>bin:xor(xs:base64Binary(xs:hexBinary("00")), xs:base64Binary(xs:hexBinary("")))</test>
    <result>
      <error code="Q{http://expath.org/ns/binary}differing-length-arguments"/>
    </result>
  </test-case>
  <test-case name="bin-and1">
    <description>Test for the and function.</description>
    <created by="Christian Grün" on="2013-11-19+01:00"/>
    <environment ref="binary"/>
    <test>xs:hexBinary(bin:and((), xs:base64Binary(xs:hexBinary("00"))))</test>
    <result>
      <assert-empty/>
    </result>
  </test-case>
  <test-case name="bin-and2">
    <description>Test for the and function.</description>
    <created by="Christian Grün" on="2013-11-19+01:00"/>
    <environment ref="binary"/>
    <test>xs:hexBinary(bin:and(xs:base64Binary(xs:hexBinary("00")), ()))</test>
    <result>
      <assert-empty/>
    </result>
  </test-case>
  <test-case name="bin-and3">
    <description>Test for the and function.</description>
    <created by="Christian Grün" on="2013-11-19+01:00"/>
    <environment ref="binary"/>
    <test>xs:hexBinary(bin:and(xs:base64Binary(xs:hexBinary("")), xs:base64Binary(xs:hexBinary(""))))</test>
    <result>
      <assert-eq>xs:hexBinary("")</assert-eq>
    </result>
  </test-case>
  <test-case name="bin-and4">
    <description>Test for the and function.</description>
    <created by="Christian Grün" on="2013-11-19+01:00"/>
    <environment ref="binary"/>
    <test>xs:hexBinary(bin:and(xs:base64Binary(xs:hexBinary("8081")), xs:base64Binary(xs:hexBinary("7F7E"))))</test>
    <result>
      <assert-eq>xs:hexBinary("0000")</assert-eq>
    </result>
  </test-case>
  <test-case name="bin-and5">
    <description>Test for the and function.</description>
    <created by="Christian Grün" on="2013-11-19+01:00"/>
    <environment ref="binary"/>
    <test>bin:and(xs:base64Binary(xs:hexBinary("00")), xs:base64Binary(xs:hexBinary("")))</test>
    <result>
      <error code="Q{http://expath.org/ns/binary}differing-length-arguments"/>
    </result>
  </test-case>
  <test-case name="bin-not1">
    <description>Test for the not function.</description>
    <created by="Christian Grün" on="2013-11-19+01:00"/>
    <environment ref="binary"/>
    <test>xs:hexBinary(bin:not(()))</test>
    <result>
      <assert-empty/>
    </result>
  </test-case>
  <test-case name="bin-not2">
    <description>Test for the not function.</description>
    <created by="Christian Grün" on="2013-11-19+01:00"/>
    <environment ref="binary"/>
    <test>xs:hexBinary(bin:not(xs:base64Binary(xs:hexBinary("00"))))</test>
    <result>
      <assert-eq>xs:hexBinary("FF")</assert-eq>
    </result>
  </test-case>
  <test-case name="bin-not3">
    <description>Test for the not function.</description>
    <created by="Christian Grün" on="2013-11-19+01:00"/>
    <environment ref="binary"/>
    <test>xs:hexBinary(bin:not(xs:base64Binary(xs:hexBinary("8081"))))</test>
    <result>
      <assert-eq>xs:hexBinary("7F7E")</assert-eq>
    </result>
  </test-case>
  <test-case name="bin-shift1">
    <description>Test for the shift function.</description>
    <created by="Christian Grün" on="2013-11-19+01:00"/>
    <environment ref="binary"/>
    <test>xs:hexBinary(bin:shift((), 1))</test>
    <result>
      <assert-empty/>
    </result>
  </test-case>
  <test-case name="bin-shift2">
    <description>Test for the shift function.</description>
    <created by="Christian Grün" on="2013-11-19+01:00"/>
    <environment ref="binary"/>
    <test>xs:hexBinary(bin:shift(xs:base64Binary(xs:hexBinary("77")), 0))</test>
    <result>
      <assert-eq>xs:hexBinary("77")</assert-eq>
    </result>
  </test-case>
  <test-case name="bin-shift3">
    <description>Test for the shift function.</description>
    <created by="Christian Grün" on="2013-11-19+01:00"/>
    <environment ref="binary"/>
    <test>xs:hexBinary(bin:shift(xs:base64Binary(xs:hexBinary("33")), 1))</test>
    <result>
      <assert-eq>xs:hexBinary("66")</assert-eq>
    </result>
  </test-case>
  <test-case name="bin-shift4">
    <description>Test for the shift function.</description>
    <created by="Christian Grün" on="2013-11-19+01:00"/>
    <environment ref="binary"/>
    <test>xs:hexBinary(bin:shift(xs:base64Binary(xs:hexBinary("66")), -1))</test>
    <result>
      <assert-eq>xs:hexBinary("33")</assert-eq>
    </result>
  </test-case>
</test-set>
