<?xml version="1.0" encoding="UTF-8"?>
<test-set xmlns="http://www.w3.org/2010/09/qt-fots-catalog" name="houtil-lowest" 
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
    <description>Tests for the EXPath houtil:lowest</description>
    <link type="spec" document="http://www.w3.org/TR/xpath-functions-31/" idref="func-array-head"/>
    <dependency type="spec" value="XP31+ XQ31+"/>

    <environment name="houtil">
        <namespace prefix="houtil" uri="http://saxon.sf.net/"/>
    </environment>

    <test-case name="houtil-lowest-001">
        <description>Integer with lowest square</description>
        <created by="Michael Kay" on="2018-08-28"/>
        <environment ref="houtil"/>
        <test>houtil:lowest(-5 to +3, function($i){$i*$i})</test>
        <result>
            <assert-eq>0</assert-eq>
        </result>
    </test-case>
    
    <test-case name="houtil-lowest-002">
        <description>Empty sequence</description>
        <created by="Michael Kay" on="2018-08-27"/>
        <environment ref="houtil"/>
        <test>houtil:lowest((1 to 100)[. = year-from-date(current-date())], function($i){$i*$i})</test>
        <result>
            <assert-empty/>
        </result>
    </test-case>
    
    <test-case name="houtil-lowest-003">
        <description>Shortest string</description>
        <created by="Michael Kay" on="2018-08-28"/>
        <environment ref="houtil"/>
        <test>houtil:lowest(("red", "orange", "yellow", "green", "blue", "indigo", "violet"), string-length#1)</test>
        <result>
            <assert-eq>"red"</assert-eq>
        </result>
    </test-case>
    
    <test-case name="houtil-lowest-004">
        <description>First in alphabetic order</description>
        <created by="Michael Kay" on="2018-08-28"/>
        <environment ref="houtil"/>
        <test>houtil:lowest(doc(static-base-uri())//*:test-case, function($t){string($t/@name)})/*:description</test>
        <result>
            <assert-eq>"Integer with lowest square"</assert-eq>
        </result>
    </test-case>
    
    <test-case name="houtil-lowest-005">
        <description>Function may return empty sequence</description>
        <created by="Michael Kay" on="2018-08-28"/>
        <environment ref="houtil"/>
        <test>houtil:lowest(-5 to +10, function($i){if ($i lt 0) then $i*$i else ()})</test>
        <result>
            <assert-eq>-1</assert-eq>
        </result>
    </test-case>
    
    <test-case name="houtil-lowest-006">
        <description>Mix numbers with untyped atomic</description>
        <created by="Michael Kay" on="2018-08-28"/>
        <environment ref="houtil"/>
        <test>houtil:lowest(-5 to +10, function($i){if ($i lt 0) then $i*$i else xs:untypedAtomic($i*$i)})</test>
        <result>
            <assert-eq>0</assert-eq>
        </result>
    </test-case>
    
    <test-case name="houtil-lowest-007">
        <description>Items with key:NaN are ignored</description>
        <created by="Michael Kay" on="2018-08-28"/>
        <environment ref="houtil"/>
        <test>houtil:lowest((-5 to +10, "nanana"), function($i){number($i)})</test>
        <result>
            <assert-eq>-5</assert-eq>
        </result>
    </test-case>
    
    <test-case name="houtil-lowest-008">
        <description>Binary data types are now ordered</description>
        <created by="Michael Kay" on="2018-08-28"/>
        <environment ref="houtil"/>
        <test>houtil:lowest(("1a", "0100", "fd", "F1", "dd"), function($i){xs:hexBinary($i)})</test>
        <result>
            <assert-eq>"0100"</assert-eq>
        </result>
    </test-case>
    
    <test-case name="houtil-lowest-009">
        <description>Function returns a node (this is atomized by virtue of function coercion)</description>
        <created by="Michael Kay" on="2018-08-28"/>
        <environment ref="houtil"/>
        <test><![CDATA[houtil:lowest(3 to 12, function($i){parse-xml("<a>"||$i||"</a>")})]]></test>
        <result>
            <assert-eq>3</assert-eq>
        </result>
    </test-case>
    
    <test-case name="houtil-lowest-010">
        <description>Earliest date</description>
        <created by="Michael Kay" on="2018-08-28"/>
        <environment ref="houtil"/>
        <test>houtil:lowest(doc(static-base-uri())//*:test-case, function($t){xs:date($t/*:created/@on)})/*:description</test>
        <result>
            <assert-eq>"Empty sequence"</assert-eq>
        </result>
    </test-case>
    
    <test-case name="houtil-lowest-996">
        <description>Value of unordered type</description>
        <created by="Michael Kay" on="2018-08-28"/>
        <environment ref="houtil"/>
        <test>houtil:lowest((QName("http://www.w3.org/", "defined"), QName("http://www.w3.org/", "undefined")), function($i){$i})</test>
        <result>
            <error code="FORG0006"/>
        </result>
    </test-case>
    
    <test-case name="houtil-lowest-997">
        <description>Singleton value of unordered type</description>
        <created by="Michael Kay" on="2018-08-28"/>
        <environment ref="houtil"/>
        <test>houtil:lowest(QName("http://www.w3.org/", "undefined"), function($i){$i})</test>
        <result>
            <error code="FORG0006"/>
        </result>
    </test-case>
    
    <test-case name="houtil-lowest-998">
        <description>Non-comparable values returned by function</description>
        <created by="Michael Kay" on="2018-08-28"/>
        <environment ref="houtil"/>
        <test>houtil:lowest(-5 to +3, function($i){if ($i lt 0) then $i else string($i)})</test>
        <result>
            <error code="FORG0006"/>
        </result>
    </test-case>
    
    <test-case name="houtil-lowest-999">
        <description>Function throws an error</description>
        <created by="Michael Kay" on="2018-08-28"/>
        <environment ref="houtil"/>
        <test>houtil:lowest(-5 to +3, function($i){10 div $i})</test>
        <result>
            <error code="FOAR0001"/>
        </result>
    </test-case>
    
    
</test-set>